import json
import faiss
import numpy as np
from openai import OpenAI
import os
from dotenv import load_dotenv
from datetime import datetime

# Carrega vari√°veis de ambiente
load_dotenv()
client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

# Fun√ß√£o para criar embeddings
def get_embeddings(texts, model="text-embedding-3-small"):
    embeddings = []
    for text in texts:
        response = client.embeddings.create(model=model, input=text)
        embeddings.append(response.data[0].embedding)
    return np.array(embeddings).astype("float32")

# Carrega crit√©rios BDD existentes
with open("criteria_bdd.json", "r", encoding="utf-8") as f:
    criteria = json.load(f)

# Gera embeddings e cria √≠ndice FAISS
embeddings = get_embeddings(criteria)
dimension = embeddings.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(embeddings)

# Recebe novo crit√©rio BDD
novo_criterio = input("Digite o novo crit√©rio de aceita√ß√£o (formato BDD): ")

# Busca crit√©rios semelhantes no √≠ndice
novo_embedding = get_embeddings([novo_criterio])
distances, indices = index.search(novo_embedding, k=5)

# Recupera crit√©rios mais pr√≥ximos
criterios_proximos = [criteria[i] for i in indices[0] if criteria[i] != novo_criterio]

# Monta prompt para an√°lise de conflitos
prompt = f"""
Voc√™ √© um assistente para an√°lise de crit√©rios de aceita√ß√£o no formato BDD.
Seu trabalho √© comparar um crit√©rio novo com crit√©rios existentes e classific√°-los em:

- Duplicado: descreve exatamente a mesma funcionalidade ou comportamento, sem diferen√ßas importantes.
- Conflitante: descreve um comportamento oposto ou incompat√≠vel com o crit√©rio novo.
- Complementar: est√° relacionado e acrescenta detalhes ou condi√ß√µes, mas n√£o √© igual nem conflitante.
- Irrelevante: n√£o est√° relacionado com o crit√©rio novo.

Considere que:

- Crit√©rios duplicados indicam redund√¢ncia e devem ser evitados.
- Crit√©rios conflitantes indicam problemas que precisam ser resolvidos.
- Crit√©rios complementares enriquecem o entendimento e podem coexistir.
- Crit√©rios irrelevantes n√£o devem ser considerados para duplica√ß√£o ou conflito.

Dado o crit√©rio novo e uma lista de crit√©rios existentes, classifique cada um e explique brevemente o motivo.

Crit√©rio novo:
"{novo_criterio}"

Crit√©rios existentes:
{json.dumps(criterios_proximos, indent=2, ensure_ascii=False)}

Explique brevemente o motivo de cada classifica√ß√£o.
"""

# Chama o LLM
response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": "Voc√™ √© um analista de QA experiente em metodologias √°geis."},
        {"role": "user", "content": prompt}
    ]
)

# Resultado da an√°lise
analise = response.choices[0].message.content

# Mostra resultado no console
print("\nüîç An√°lise de conflitos entre crit√©rios BDD:")
print(analise)

# Salva relat√≥rio em Markdown
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
nome_arquivo = f"relatorio_analise_{timestamp}.md"

with open(nome_arquivo, "w", encoding="utf-8") as f:
    f.write(f"# Relat√≥rio de An√°lise de Crit√©rio BDD\n\n")
    f.write(f"**Data:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
    f.write(f"## Crit√©rio analisado:\n")
    f.write(f"> {novo_criterio}\n\n")
    f.write(f"## Crit√©rios semelhantes encontrados:\n")
    for c in criterios_proximos:
        f.write(f"- {c}\n")
    f.write(f"\n## Resultado da an√°lise do LLM:\n")
    f.write(analise)
    f.write("\n")

print(f"\n‚úÖ Relat√≥rio salvo em: {nome_arquivo}")
